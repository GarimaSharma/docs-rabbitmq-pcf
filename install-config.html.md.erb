---
title: Installing and Configuring RabbitMQ for PCF as an On-Demand Service
owner: London Services
---

This topic provides instructions to PCF operators about how to install, configure, and deploy the RabbitMQ for PCF tile to provide on-demand service. 

<p class="note"><strong>Note</strong>: For instructions on how to install, configure, and deploy the RabbitMQ for PCF tile 
as a pre-provisioned service, see
<a href="./install-config-pp.html">the documentation for pre-provisioned RabbitMQ for PCF</a>.</p>

## <a id="install"></a> Download and Install the Tile

1. Download the product file from Pivotal Network.

2. Navigate to the Ops Manager Installation Dashboard and click **Import a Product** to upload the product file. 

3. Under the **Import a Product** button, click **+** next to the version number of RabbitMQ for PCF. This adds the tile to your staging area.

4. Click the newly added **RabbitMQ for PCF** tile to configure the service.

## <a id="tile_configurations"></a> Tile Configurations

The configuration screen appears when you click the RabbitMQ for PC tile in Ops Manager:

![Configuring Errand Run Rules](images/errands-pane.png)


### Configure Global Settings

Click **Dedicated Instance: Global Settings** and configure the following:
 
- **Service instance quota**  min: 0, max: 50  set the total number of dedicated service instances which can be deployed.
- **VM options**:
  - **Allow outbound internet access (IaaS-dependent)**. For more information, see the Ops Manager documentation. Log forwarding and backups may require internet access.

### Configuration Options for Service Plans


The following configuration options are available:

- **Enable this plan**: Check this to enable on-demand (dedicated) RabbitMQ instances on CF marketplace.
- **Service instance quota**: The maximum number of services that can be created by the on demand broker.
- **Plan name**: The service name that appears in the CF marketplace. You can only configure this for the on-demand service plan.
- **Plan description**: The plan description that appears in the CF marketplace.
- **Plan features**: The features associated with this plan that will appear in the CF marketplace.
- **RabbitMQ VM Type**: The type of VM that the RabbitMQ node will be created on.
- **Persistent disk type**: The type of persistent disk that the RabbitMQ node will be created on.
- **AZ placement**: The AZ(s) that the service instance will be deployed into.

<%= image_tag("images/config_rabbitmq_odb.png") %>

### Enabling the On-Demand Service Broker

In order to enable the on-demand service plan, you must configure the **Dedicated Instance: Single Node Plan**. In the Dedicated Instance Single Node Plan plan, there is a single node in the cluster. However, there is still an `HAProxy` associated with the cluster.

  <p class="note"><strong>Note</strong>: If the ODB feature is not enabled, the ODB is deployed alongside the RabbitMQ installation, but it is not available in the Marketplace.</p>


### Explanation of Resource Types and Requirements

It is possible to configure the VM type for RabbitMQ and HAProxy instances by using the fields `RabbitMQ VM Type` and `HAProxy VM Type` respectively.
It is also possible to chose the size of the persistent disk that is going to be attached the RabbitMQ instances.
It is also necessary to chose the Availability Zone (AZ) the service instance is going to live in.

<%= image_tag("images/config_rabbitmq_odb_resources.png") %>



## <a id="config-on-demand"></a>  Configure the Tile for On-Demand Service

Follow the steps below to configure the RabbitMQ for PCF tile for on-demand service instances. 
This procedure only addresses how to configure RabbitMQ for PCF as an on-demand service. 
Currently there is only one type of plan available for the on-demand service. 
Its default name is Solo.

1. Click **Assign AZs and Networks**.
    <p class="note"><strong>IMPORTANT</strong>: You cannot change the regions or networks after you have clicked **Apply Changes** in the final step below.</p>

2. Configure the fields on the **Assign AZs and Networks** as follows:
  <table>
    <tr><th>Field</th><th>Instructions</th></tr>
    <tr><td><strong>Place singleton jobs in</strong></td>
        <td>Select the region that you want for singleton VMs. PCF creates the RabbitMQ broker in this AZ.</td></tr>
    <tr><td><strong>Balance other jobs in</strong></td>
        <td>Select additional region. This selection does not affect the on-demand RabbitMQ for PCF service.</td></tr>
    <tr><td><strong>Network</strong></td>
        <td>Select a subnet for the RabbitMQ broker.<br>
            This network is represented by the Default Network in this <a href="./about.html#on-demand">picture</a>.
            Typically, you select the subnet used for the Pivotal Elastic Runtime components.
            <strong>Q:</strong> Who sets up this subnet? Should I use the same subnet as for my ERT components? Do we need to specify that it cannot be an IPsec subnet?
            <a href="https://docs.pivotal.io/rabbitmq-cf/1-7/">https://docs.pivotal.io/rabbitmq-cf/1-7/</a>.</td></tr>
    <tr><td><strong>Service Network</strong></td>
        <td> This is the subnet that the on-demand service instances are on. 
             A typical practice is to put all on-demand services on a single subnet. (?) 
             This network is represented by the Services Network in this <a href="./about.html#on-demand">picture</a>. 
             If you are not using on-demand services but only pre-provisioned services, you need to specify a subnet but which subnet you specify does not matter.</td></tr>
  </table>

3. Click **Save**.

4. Click **RabbitMQ**.

5. Enter **RabbitMQ admin user credentials**.<br>
   These credentials are not used by the on-demand RabbitMQ for PCF service but the fields cannot be blank.
   You do not need to make any other edits to this page.

6. (Optional) Enter a value for the **Metrics polling interval**. The default is 30&nbsp;seconds. 

6. Click **Save**.

7. If you want to set up monitoring, click **Syslog**, complete the fields, and save.<br>
   For more information, see [Monitoring RabbitMQ for PCF](./monitor.html).

7. Click **Dedicated Instance: Single Node Plan**. 

     ![service-plan-tab-v1.8.0](service-plan-configuration.png)

8. Configure the fields on the **Dedicated Instance: Single Node Plan** as follows:
  <table>
    <tr><th>Field</th><th>Instructions</th></tr>
    <tr><td><strong>Enable this plan</strong></strong></td>
        <td>Select the checkbox.</td></tr>
    <tr><td><strong>Service instance quota</strong></td>
        <td>Enter the maximum number of dedicated service instances that can be available at one time.</td></tr>
    <tr><td><strong>Plan name</strong></td>
        <td>Accept the default or enter a name. This is the name that appears in the Marketplace.</td></tr>
    <tr><td><strong>Plan description</strong></td>
        <td>Accept the default or enter a description.</td></tr>
    <tr><td><strong>Plan features</strong></td>
        <td>Accept the default or enter information about the plan to help your app developers.</td></tr>
    <tr><td><strong>RabbitMQ VM Type</strong></td>
        <td>Select a large VM type.<br>The plan will create a service instance of this size.</td></tr>
    <tr><td><strong>Persistent disk type</strong></td>
    <td>This is where RabbitMQ will page messages to disk. See <a href="#disk-size-concers">Disk Size Concerns</a> for more details.</td></tr>
    <tr><td><strong>AZ placement</strong></td>
        <td>Select one AZ for the single node.<br>The plan will create all the on-demand service instance VMs in this AZ.</td></tr>
  </table>
    
9. Click **Save**.

10. Click **Stemcell**.

11. Verify and, if necessary, import a new stemcell version.  
    For more information, see the information about importing the stemcell for your IaaS:
    [AWS](https://docs.pivotal.io/pivotalcf/customizing/cloudform-er-config.html#stemcell),
    [Azure](https://docs.pivotal.io/pivotalcf/customizing/azure-er-config.html#stemcell), 
    [GCP](https://docs.pivotal.io/pivotalcf/customizing/gcp-er-config.html#stemcell), or
    [vSphere](https://docs.pivotal.io/pivotalcf/customizing/config-er-vmware.html#stemcell).

12. Return to the Ops Manager Installation Dashboard and click **Apply Changes**.

## <a id="disk-size-concerns"></a> Disk Size Concerns

RabbitMQ raises alarms when disk space drops below the configured limit.
Incorrect disk sizes may cause the deployed instance not to start.
RabbitMQ declines to start if there is not enough space available according to the threshold.

Dedicated instances are configured with a threshold set to the 40% of the memory (RAM) of the VM.
Operators can take the following table as an example when selecting the size of the persistent disk.

The following table shows an example of possible RAM values, absolute minimal value below which 
RabbitMQ declines to start, and the disk size suggested for an average use case.

<table border="1" class="nice">
  <tr>
    <td>RAM</td>
    <td>Free disk alarm threshold (0.4xRAM)</td>
    <td>Suggested disk size (2xRAM)</td>
  <tr>
  <tr>
    <td>10 GB</td>
    <td>4 GB</td>
    <td>20 GB</td>
  <tr>
  <tr>
    <td>16 GB</td>
    <td>6.4 GB</td>
    <td>32 GB</td>
  <tr>
  <tr>
    <td>32 GB</td>
    <td>12.8 GB</td>
    <td>64 GB</td>
  <tr>
</table>

<%= image_tag("images/vm-ram-disk-example.png") %>

For more information, see the following documentation links.</br></br>
  - [Alarms overview](http://www.rabbitmq.com/alarms.html)<br></br>
  - [Disk Alarms](http://www.rabbitmq.com/disk-alarms.html)

## <a id='logging'></a>Syslog Forwarding Configuration

As of RabbitMQ for PCF v1.9.0, syslog forwarding is preconfigured and set to on by default.
Pivotal recommends that you keep the default setting because it is good operational practice.
However, you can opt out by selecting **No** for **Do you want to configure syslog?** in the Ops Manager **Settings** tab.

![Ops Manager Syslog Forwarding Configuration](images/syslog-config-1.9.0.png)

Pivotal recommends that operators configure a syslog endpoint and port. In a future release, the endpoint and port will be required.

###<a id="log-format"></a> Logging Format

The logging format does not change in v1.9.0.
For users familiar with documentation for previous versions of the tile, the tag we used to call the `app_name` is now called the `program_name`.
The log format is as follows:

`<PRI>TIMESTAMP IP_ADDRESS PROGRAM_NAME [job=NAME index=JOB_INDEX id=JOB_ID] MESSAGE`

The raw logs look similar to the following:

```
<7>2017-06-28T16:06:10.733560+00:00 10.244.16.133 vcap.agent [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  2017/06/28 16:06:10  CEF:0|CloudFoundry|BOSH|1|agent_api|ssh|1|duser=director.be5a66bb-a9b4-459f-a0d3-1fc5c9c3ed79.be148cc6-91ef-4eed-a788-237b0b8c63b7 src=10.254.50.4 spt=4222 shost=5ae233e0-ecc5-4868-9ae0-f9767571251b
<86>2017-06-28T16:06:16.704572+00:00 10.244.16.133 useradd [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  new group: name=bosh_ly0d2rbjr, GID=1003
<86>2017-06-28T16:06:16.704663+00:00 10.244.16.133 useradd [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  new user: name=bosh_ly0d2rbjr, UID=1001, GID=1003, home=/var/vcap/bosh_ssh/bosh_ly0d2rbjr, shell=/bin/bash
<86>2017-06-28T16:06:16.736932+00:00 10.244.16.133 usermod [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  add 'bosh_ly0d2rbjr' to group 'admin'
<86>2017-06-28T16:06:16.736964+00:00 10.244.16.133 usermod [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  add 'bosh_ly0d2rbjr' to group 'vcap'
```

Logs sent to external logging tools such as Papertrail may be presented in a different format.

The following table describes the logging tags used in this template:

<table class="nice">
  <th>Tag</th>
  <th>Description</th>
  <tr>
    <td><strong>PRI</strong></td>
    <td>This is a value which in future will be used to describe the severity of the log message and which facility it came from.</td>
  </tr>
  <tr>
    <td><strong>TIMESTAMP</strong></td>
    <td>This is the timestamp of when the log is forwarded, for example, <code>2016-08-24T05:14:15.000003Z</code>.
        The timestamp value is typically slightly after when the log message was generated.</td>
  </tr>
  <tr>
    <td><strong>IP_ADDRESS</strong></td>
    <td>The internal IP address of server on which the log message originated</td>
  </tr>
  <tr>
    <td><strong>PROGRAM_NAME</strong></td>
    <td>Process name of the program the generated the message.
        Same as <code>app_name</code> before v1.9.0. 
        For more information about program name, see <a href="#program-names">RabbitMQ Program Names</a> below.</td>
  </tr>
  <tr>
    <td><strong>NAME</strong></td>
    <td>The BOSH instance group name (for example, <code>rabbitmq_server</code>)</td>
  </tr>
  <tr>
    <td><strong>JOB_INDEX</strong></td>
    <td>BOSH job index. Used to distinguish between multiple instances of the same job.</td>
  </tr>
  <tr>
    <td><strong>JOB_ID</strong></td>
    <td>BOSH VM GUID. This is distinct from the CID displayed in the Ops Manager Status tab, which corresponds to the VM ID assigned by the infrastructure provider.</td>
  </tr>
  <tr>
    <td><strong>MESSAGE</strong></td>
    <td>The log message that appears</td>
  </tr>
</table>

###<a id='program-names'></a> RabbitMQ Program Names

<table>
  <thead>
    <th>Program Name</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><strong>rabbit_server_cluster_check</strong></td>
      <td>Checks that the RabbitMQ cluster is healthy. Runs after every deploy.</td>
    </tr>
    <tr>
      <td><strong>rabbit_server_node_check</strong></td>
      <td>Checks that the RabbitMQ node is healthy. Runs after every deploy.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_route_registrar_stderr</strong></td>
      <td>Registers the route for the management API with the Gorouter in your Elastic Runtime deployment.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_route_registrar_stdout</strong></td>
      <td>Registers the route for the management API with the Gorouter in your Elastic Runtime deployment.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server</strong></td>
      <td>The Erlang VM and RabbitMQ apps. <em>Logs may span multiple lines</em>.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_drain</strong></td>
      <td>Shuts down the Erlang VM and RabbitMQ apps. Runs as part of the BOSH lifecycle.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_http_api_access</strong></td>
      <td>Access to the RabbitMQ management UI.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_init</strong></td>
      <td>Starts the Erlang VM and RabbitMQ.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_post_deploy_stderr</strong></td>
      <td>Runs the node check and cluster check. Runs after every deploy.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_post_deploy_stdout</strong></td>
      <td>Runs the node check and cluster check. Runs after every deploy.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_pre_start</strong></td>
      <td>Runs before the rabbitmq-server job is started.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_sasl</strong></td>
      <td>Supervisor, progress, and crash reporting for the Erlang VM and RabbitMQ apps.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_shutdown_stderr</strong></td>
      <td>Stops the RabbitMQ app and Erlang VM.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_shutdown_stdout</strong></td>
      <td>Stops the RabbitMQ app and Erlang VM.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_startup_stderr</strong></td>
      <td>Starts the RabbitMQ app and Erlang VM, then configures users and permissions.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_startup_stdout</strong></td>
      <td>Starts the RabbitMQ app and Erlang VM, then configures users and permissions.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_upgrade</strong></td>
      <td>Shuts down Erlang VM and RabbitMQ app if required during an upgrade.</td>
    </tr>
  </tbody>
</table>


## <a id='errands'></a>Errands

When deploying or updating the RabbitMQ for PCF tile, Ops Manager can optionally run a series of [post-deploy errands](#post-deploy-errands). An example is the `Smoke Tests` errand, which checks the health of the RabbitMQ cluster after a deploy or upgrade.

You can decide whether to run errands by toggling them on or off before an update. This is a one-time setting on the installation dashboard:

![Configuring One-time Errands](images/errands-installation.png)

<p class='note'><strong>IMPORTANT</strong>: As of RabbitMQ for PCF v1.9.0, all post-deploy errands are ON by default.
    Pivotal recommends keeping these defaults, because the smoke tests can encounter unexpected issues,
    and dedicated instances of RabbitMQ for PCF may fall behind
    if the <strong>Upgrade All Service Instances</strong> errand is not on by default.</p>

However, if necessary, you can change these defaults by clicking **Errands** in the RabbitMQ for PCF **Settings** tab.

For more information on errand run rules, see the [Ops Manager documentation](https://docs.pivotal.io/tiledev/tile-errands.html#run-rules).

### <a id='post-deploy-errands'></a>Post-Deploy Errands

<table class="nice">
  <th>Errand</th>
  <th>Description</th>
  <tr>
    <td><strong>Broker Registrar</strong></td>
    <td>Makes the pre-provisioned RabbitMQ service plans available in the Marketplace</td>
  </tr>
  <tr>
    <td><strong>Smoke Tests</strong></td>
    <td>Checks that a pre-provisioned RabbitMQ service instance can be bound to a Cloud Foundry app, and that the app can
    publish and subscribe to a RabbitMQ cluster</td>
  </tr>
  <tr>
    <td><strong>Register On-Demand Service Broker</strong></td>
    <td>Makes the on-demand RabbitMQ service plans available in the Marketplace. If you change the Service Plan Configuration,
    you must run this errand in order for the changes to be reflected in the Marketplace.</td>
      </tr>
  <tr>
    <td><strong>Upgrade All Service Instances</strong></td>
    <td>On-demand instances are updated and redeployed if there are changes to the Dedicated Instance settings or the
    tile is upgraded. If this errand is set to "Off" or "When Changed", updates to Dedicated Instance settings will **not**
    be applied to existing service instances. **Pivotal strongly recommends that this errand is configured to always run**.</td>
  </tr>
</table>

### <a id='pre-delete-errands'></a>Pre-Delete Errands

<table class="nice">
  <th>Errand</th>
  <th>Description</th>
  <tr>
    <td><strong>Broker Deregistrar</strong></td>
    <td>Removes the pre-provisioned RabbitMQ service from the Marketplace and deletes all associated service instances and bindings</td>
  </tr>
  <tr>
    <td><strong>Delete All Service Instances</strong></td>
    <td>Unbinds and deletes existing dedicated service instances.
    The duration of this errand depends on the number of deployed dedicated instances.</td>
  </tr>
  <tr>
    <td><strong>Deregister On-Demand Service Broker</strong></td>
    <td>Removes the on-demand RabbitMQ service from the Marketplace</td>
  </tr>
</table>



## <a id="smoke_test_process"></a> Smoke-Tests Steps

The smoke tests perform the following for each available service plan:

1. Targets the org <code>system</code> and creates a space to run the tests.
1. Deploys an instance of the [CF RabbitMQ Example App](https://github.com/pivotal-cf/rabbit-example-app) to this space
1. Creates a RabbitMQ service instance and binds it to the CF RabbitMQ Example App
1. Checks that the CF RabbitMQ Example App can write to and read from the RabbitMQ service instance
1. Cleans up all deployed application and all its service bindings. Finally, the cf space is deleted.
