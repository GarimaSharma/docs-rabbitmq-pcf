---
breadcrumb: RabbitMQ for Pivotal Cloud Foundry Documentation
title: RabbitMQ for PCF
owner: London Services
---
## <a id='AboutTile'></a>About RabbitMQ for PCF

RabbitMQ for Pivotal Cloud Foundry (PCF) enables PCF app developers to provision and use the RabbitMQ message broker with a
single command.

As of version 1.8, RabbitMQ for PCF supports two types of service, an *on-demand* service and a *pre-provisioned* service.
This table summarizes the main differences between the two:

<table id='rabbit-odb-vs-pre' border="1" class="nice"><tr>
   <th></th>
   <th>Available Since</th>
   <th>VMs it Runs On</th>
   <th>How VMs are Created</th>
   <th>Metrics Name Prefix</th>
   </tr><tr>
   <th>On-Demand Service</th>
   <td>v1.8</td>
   <td>Dedicated VM that serves a single service instance</td>
   <td>PCF creates each VM on-demand when app developer creates service instance</td>
   <td><code>p.rabbitmq</code> (with a dot) in future versions. As of v1.8.2, emitted as<code>p-rabbitmq</code>, a <a href="./releases.html#18x">known issue</a>.</td>
   </tr><tr>
   <th>Pre-Provisioned Service</th>
   <td>v1.2</td>
   <td>Multi-tenant VMs shared by apps across PCF deployment</td>
   <td>PCF creates all VMs when operator deploys or updates service</td>
   <td><code>p-rabbitmq</code> (with a dash)</td>
   </tr>
</table>

This RabbitMQ for PCF v1.8 documentation describes both service types.
Documentation for RabbitMQ for PCF v1.7 and earlier only describes a pre-provisioned service.

## What are dedicated instances and when to use them with RabbitMQ
For PCF RabbitMQ versions before v1.8.0, the RabbitMQ Service
instances correspond to a unique RabbitMQ Vhost on the multi-tenant RabbitMQ
cluster. As of RabbitMQ for PCF v1.8.0, we introduced [On-Demand Broker
(ODB)](https://docs.pivotal.io/svc-sdk/odb/index.html) support (experimental). That means
that a new cluster can be created and dedicated to a single app
(single-tenant).

## <a id='AboutRabbit'></a>About RabbitMQ

RabbitMQ is a fast and dependable open-source message server, which supports a wide range of use cases
including reliable integration, content-based routing and global data delivery, and high-volume monitoring and data ingestion.

Emerging as the de facto standard for cloud messaging, RabbitMQ is used for efficient communication
between servers, apps and devices, and creates lasting value by enabling rapid development of modern decentralized
app and data architectures that can scale with your business needs.



## <a id='snapshot'></a> Product Snapshot

The following table provides version and version-support information about RabbitMQ for PCF.

<table class="nice">
    <th>Element</th>
    <th>Details</th>
    <tr>
        <td>Version</td>
        <td>v1.9.0</td>
    </tr>
    <tr>
        <td>Release date</td>
        <td>June 30, 2017</td>
    </tr>
    <tr>
        <td>Software component version</td>
        <td>RabbitMQ OSS v3.6.9</td>
    </tr>
    <tr>
        <td>Compatible Ops Manager version(s)</td>
        <td>v1.10.x</td>
    </tr>
    <tr>
        <td>Compatible Elastic Runtime version(s)</td>
        <td>v1.10.3 and later</td>
    </tr>
    <tr>
        <td>IaaS support</td>
        <td>AWS, Azure, GCP, OpenStack, and vSphere</td>
    </tr>
</table>

## <a id='features'></a>Features

###<a id='on-demand'></a> On-Demand

* Provision on-demand single node dedicated instances of RabbitMQ

###<a id='pre-provisioned'></a> Pre-Provisioned

* Provision an instance of the RabbitMQ service, which corresponds to a unique RabbitMQ Vhost (virtual host)
* Bind apps to an instance of the plan, providing unique credentials for each binding
* Management dashboard access to PCF Operators and app developers
* Deployment across multiple availability zones, with nodes striped across the AZs automatically
* Enable SSL (Secure Sockets Layer) for the AMQP, MQTT, STOMP protocols
* HAProxy load balancer across all nodes to balance connections
* Plugin configuration can be easily changed at any time and the cluster redeployed and updated
* The cluster topology can be changed and easily scaled out
* Automated upgrades of RabbitMQ for major, minor, and patch releases (see release notes for downtime requirements)
* Configure the end point for the RabbitMQ Syslog
* RabbitMQ and HAProxy metrics are exposed on the firehose
* Syslog forwarding on by default

## <a id='logging'></a>Syslog Forwarding Configuration

As of RabbitMQ for PCF v1.9.0, syslog forwarding is preconfigured and set to on by default.
Pivotal recommends that you keep the default setting because it is good operational practice.
However, you can opt out by selecting **No** for **Do you want to configure syslog?** in the Ops Manager **Settings** tab.

![Ops Manager Syslog Forwarding Configuration](images/syslog-config-1.9.0.png)

Pivotal recommends that operators configure a syslog endpoint and port. In a future release, the endpoint and port will be required.

###<a id="log-format"></a> Logging Format

The logging format does not change in v1.9.0.
For users familiar with documentation for previous versions of the tile, the tag we used to call the `app_name` is now called the `program_name`.
The log format is as follows:

`<PRI>TIMESTAMP IP_ADDRESS PROGRAM_NAME [job=NAME index=JOB_INDEX id=JOB_ID] MESSAGE`

The raw logs look similar to the following:

```
<7>2017-06-28T16:06:10.733560+00:00 10.244.16.133 vcap.agent [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  2017/06/28 16:06:10  CEF:0|CloudFoundry|BOSH|1|agent_api|ssh|1|duser=director.be5a66bb-a9b4-459f-a0d3-1fc5c9c3ed79.be148cc6-91ef-4eed-a788-237b0b8c63b7 src=10.254.50.4 spt=4222 shost=5ae233e0-ecc5-4868-9ae0-f9767571251b
<86>2017-06-28T16:06:16.704572+00:00 10.244.16.133 useradd [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  new group: name=bosh_ly0d2rbjr, GID=1003
<86>2017-06-28T16:06:16.704663+00:00 10.244.16.133 useradd [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  new user: name=bosh_ly0d2rbjr, UID=1001, GID=1003, home=/var/vcap/bosh_ssh/bosh_ly0d2rbjr, shell=/bin/bash
<86>2017-06-28T16:06:16.736932+00:00 10.244.16.133 usermod [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  add 'bosh_ly0d2rbjr' to group 'admin'
<86>2017-06-28T16:06:16.736964+00:00 10.244.16.133 usermod [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  add 'bosh_ly0d2rbjr' to group 'vcap'
```

Logs sent to external logging tools such as Papertrail may be presented in a different format.

The following table describes the logging tags used in this template:

<table class="nice">
  <th>Tag</th>
  <th>Description</th>
  <tr>
    <td><strong>PRI</strong></td>
    <td>This is a value which in future will be used to describe the severity of the log message and which facility it came from.</td>
  </tr>
  <tr>
    <td><strong>TIMESTAMP</strong></td>
    <td>This is the timestamp of when the log is forwarded, for example, <code>2016-08-24T05:14:15.000003Z</code>.
        The timestamp value is typically slightly after when the log message was generated.</td>
  </tr>
  <tr>
    <td><strong>IP_ADDRESS</strong></td>
    <td>The internal IP address of server on which the log message originated</td>
  </tr>
  <tr>
    <td><strong>PROGRAM_NAME</strong></td>
    <td>Process name of the program the generated the message.
        Same as <code>app_name</code> before v1.9.0. 
        For more information about program name, see <a href="#program-names">RabbitMQ Program Names</a> below.</td>
  </tr>
  <tr>
    <td><strong>NAME</strong></td>
    <td>The BOSH instance group name (for example, <code>rabbitmq_server</code>)</td>
  </tr>
  <tr>
    <td><strong>JOB_INDEX</strong></td>
    <td>BOSH job index. Used to distinguish between multiple instances of the same job.</td>
  </tr>
  <tr>
    <td><strong>JOB_ID</strong></td>
    <td>BOSH VM GUID. This is distinct from the CID displayed in the Ops Manager Status tab, which corresponds to the VM ID assigned by the infrastructure provider.</td>
  </tr>
  <tr>
    <td><strong>MESSAGE</strong></td>
    <td>The log message that appears</td>
  </tr>
</table>

###<a id='program-names'></a> RabbitMQ Program Names

<table>
  <thead>
    <th>Program Name</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><strong>rabbit_server_cluster_check</strong></td>
      <td>Checks that the RabbitMQ cluster is healthy. Runs after every deploy.</td>
    </tr>
    <tr>
      <td><strong>rabbit_server_node_check</strong></td>
      <td>Checks that the RabbitMQ node is healthy. Runs after every deploy.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_route_registrar_stderr</strong></td>
      <td>Registers the route for the management API with the Gorouter in your Elastic Runtime deployment.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_route_registrar_stdout</strong></td>
      <td>Registers the route for the management API with the Gorouter in your Elastic Runtime deployment.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server</strong></td>
      <td>The Erlang VM and RabbitMQ apps. <em>Logs may span multiple lines</em>.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_drain</strong></td>
      <td>Shuts down the Erlang VM and RabbitMQ apps. Runs as part of the BOSH lifecycle.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_http_api_access</strong></td>
      <td>Access to the RabbitMQ management UI.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_init</strong></td>
      <td>Starts the Erlang VM and RabbitMQ.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_post_deploy_stderr</strong></td>
      <td>Runs the node check and cluster check. Runs after every deploy.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_post_deploy_stdout</strong></td>
      <td>Runs the node check and cluster check. Runs after every deploy.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_pre_start</strong></td>
      <td>Runs before the rabbitmq-server job is started.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_sasl</strong></td>
      <td>Supervisor, progress, and crash reporting for the Erlang VM and RabbitMQ apps.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_shutdown_stderr</strong></td>
      <td>Stops the RabbitMQ app and Erlang VM.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_shutdown_stdout</strong></td>
      <td>Stops the RabbitMQ app and Erlang VM.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_startup_stderr</strong></td>
      <td>Starts the RabbitMQ app and Erlang VM, then configures users and permissions.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_startup_stdout</strong></td>
      <td>Starts the RabbitMQ app and Erlang VM, then configures users and permissions.</td>
    </tr>
    <tr>
      <td><strong>rabbitmq_server_upgrade</strong></td>
      <td>Shuts down Erlang VM and RabbitMQ app if required during an upgrade.</td>
    </tr>
  </tbody>
</table>

## <a id='errands'></a>Errands

When deploying or updating the RabbitMQ for PCF tile, Ops Manager can optionally run a series of [post-deploy errands](#post-deploy-errands). An example is the `Smoke Tests` errand, which checks the health of the RabbitMQ cluster after a deploy or upgrade.

You can decide whether to run errands by toggling them on or off before an update. This is a one-time setting on the installation dashboard:

![Configuring One-time Errands](images/errands-installation.png)

<p class='note'><strong>IMPORTANT</strong>: As of RabbitMQ for PCF v1.9.0, all post-deploy errands are ON by default.
    Pivotal recommends keeping these defaults, because the smoke tests can encounter unexpected issues,
    and dedicated instances of RabbitMQ for PCF may fall behind
    if the <strong>Upgrade All Service Instances</strong> errand is not on by default.</p>

However, if necessary, you can change these defaults in the Ops Manager **Settings** tab:

![Configuring Errand Run Rules](images/errands-pane.png)

For more information on errand run rules, see the [Ops Manager documentation](https://docs.pivotal.io/tiledev/tile-errands.html#run-rules).

### <a id='post-deploy-errands'></a>Post-Deploy Errands

<table class="nice">
  <th>Errand</th>
  <th>Description</th>
  <tr>
    <td><strong>Broker Registrar</strong></td>
    <td>Makes the pre-provisioned RabbitMQ service available in the Marketplace.
    </td>
  </tr>
  <tr>
    <td><strong>Smoke Tests</strong></td>
    <td>Checks that a pre-provisioned RabbitMQ service instance can be bound to a Cloud Foundry app and that the RabbitMQ cluster is healthy by sending and receiving messages.</td>
  </tr>
  <tr>
    <td><strong>Register On-Demand Service Broker</strong></td>
    <td>Makes the on-demand RabbitMQ service available in the Marketplace.</td>
  </tr>
  <tr>
    <td><strong>Upgrade All Service Instances</strong></td>
    <td>On-demand instances are updated and redeployed if there are changes to the Dedicated Instance settings or the tile is upgraded.</td>
  </tr>
</table>

### <a id='pre-delete-errands'></a>Pre-Delete Errands

<table class="nice">
  <th>Errand</th>
  <th>Description</th>
  <tr>
    <td><strong>Broker Deregistrar</strong></td>
    <td>Removes the pre-provisioned RabbitMQ service from the Marketplace. TODO: Does this also delete multitenant service instances?</td>
  </tr>
  <tr>
    <td><strong>Delete All Service Instances</strong></td>
    <td>TODO</td>
  </tr>
  <tr>
    <td><strong>Deregister On-Demand Service Broker</strong></td>
    <td>TODO</td>
  </tr>
</table>

## <a id='known-issues'></a>Known Issues

* Cannot scale-out if [Erlang Cookie](./install-config-pp.html#erlang) is not specified
* Changing [Erlang Cookie](./install-config-pp.html#erlang) value results in failed deployment
* When errand run rules are set to "When Changed", Ops Manager may not run the errands when the tile has relevant changes.
  For more information, see [Managing Errands in Ops Manager](https://docs.pivotal.io/pivotalcf/1-11/customizing/managing_errands.html).
  Pivotal recommends leaving the default run rule set to **On**.

## <a id=''></a>Feedback

Please provide any bugs, feature requests, or questions to the [PCF Feedback list](mailto:pivotal-cf-feedback@pivotal.io).
