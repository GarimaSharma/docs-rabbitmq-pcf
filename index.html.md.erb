---
breadcrumb: RabbitMQ for Pivotal Cloud Foundry Documentation
title: RabbitMQ for PCF
owner: London Services
---
## <a id='AboutTile'></a>About RabbitMQ for PCF

RabbitMQ for PCF enables PCF app developers to provision and use the RabbitMQ message broker with a
single command.

As of version 1.8, RabbitMQ for PCF supports two types of service, an *on-demand* service and a *pre-provisioned* service.
This table summarizes the main differences between the two:

<table id='rabbit-odb-vs-pre' border="1" class="nice"><tr>
   <th></th>
   <th>Available Since</th>
   <th>VMs it Runs On</th>
   <th>How VMs are Created</th>
   <th>Metrics Name Prefix</th>
   </tr><tr>
   <th>On-Demand Service</th>
   <td>v1.8</td>
   <td>Dedicated VM that serves a single service instance</td>
   <td>PCF creates each VM on-demand when app developer creates service instance</td>
   <td><code>p.rabbitmq</code> (with a dot) in future versions. As of v1.8.2, emitted as<code>p-rabbitmq</code>, a <a href="./releases.html#18x">known issue</a>.</td>
   </tr><tr>
   <th>Pre-Provisioned Service</th>
   <td>v1.2</td>
   <td>Multi-tenant VMs shared by apps across PCF deployment</td>
   <td>PCF creates all VMs when operator deploys or updates service</td>
   <td><code>p-rabbitmq</code> (with a dash)</td>
   </tr>
</table>

This RabbitMQ for PCF v1.8 documentation describes both service types.
Documentation for RabbitMQ for PCF v1.7 and earlier only describes a pre-provisioned service.

## What are dedicated instances and when to use them with RabbitMQ
For PCF RabbitMQ versions before 1.8.0, the RabbitMQ Service
instances correspond to a unique RabbitMQ Vhost on the multi-tenant RabbitMQ
cluster. As of PCF RabbitMQ 1.8.0, we introduced [On-Demand Broker
(ODB)](https://docs.pivotal.io/svc-sdk/odb/index.html) support (experimental). That means
that a new cluster can be created and dedicated to a single application
(single-tenant).

## <a id='AboutRabbit'></a>About RabbitMQ

RabbitMQ is a fast and dependable open-source message server, which supports a wide range of use cases
including reliable integration, content-based routing and global data delivery, and high-volume monitoring and data ingestion.

Emerging as the de facto standard for cloud messaging, RabbitMQ is used for efficient communication
between servers, applications and devices, and creates lasting value by enabling rapid development of modern decentralized
application and data architectures that can scale with your business needs.



## <a id='snapshot'></a> Product Snapshot

The following table provides version and version-support information about RabbitMQ for PCF.

<table class="nice">
    <th>Element</th>
    <th>Details</th>
    <tr>
        <td>Version</td>
        <td>v1.9.0</td>
    </tr>
    <tr>
        <td>Release date</td>
        <td>June 30, 2017</td>
    </tr>
    <tr>
        <td>Software component version</td>
        <td>RabbitMQ OSS v3.6.9</td>
    </tr>
    <tr>
        <td>Compatible Ops Manager version(s)</td>
        <td>v1.10.x</td>
    </tr>
    <tr>
        <td>Compatible Elastic Runtime version(s)</td>
        <td>v1.10.3 and higher</td>
    </tr>
    <tr>
        <td>IaaS support</td>
        <td>AWS, Azure, GCP, OpenStack, and vSphere</td>
    </tr>
</table>

## <a id='features'></a>Features

### On-Demand

* Provision on-demand single node dedicated instances of RabbitMQ

### Pre-Provisioned

* Provision an instance of the RabbitMQ service, which corresponds to a unique RabbitMQ Vhost (virtual host)
* Bind applications to an instance of the plan, providing unique credentials for each binding
* Management dashboard access to PCF Operators and application developers
* Deployment across multiple availability zones, with nodes striped across the AZs automatically
* Enable SSL (Secure Sockets Layer) for the AMQP, MQTT, STOMP protocols
* HAProxy load balancer across all nodes to balance connections
* Plugin configuration can be easily changed at any time and the cluster redeployed and updated
* The cluster topology can be changed and easily scaled out
* Automated upgrades of RabbitMQ for major, minor and patch releases (see release notes for downtime requirements)
* Configure the end point for the RabbitMQ Syslog
* RabbitMQ and HAProxy metrics are exposed on the firehose
* Syslog forwarding on by default

## <a id='logging'></a>Syslog Forwarding Configuration

As of RabbitMQ for PCF 1.9.0, syslog forwarding is preconfigured and set to on by default. We recommend that you keep the default setting as it is good operational practice. However, you can opt out by selecting **No** for **Do you want to configure syslog?** in the Ops Manager **Settings** tab.

![Ops Manager Syslog Forwarding Configuration](images/syslog-config-1.9.0.png)

We recommend that operators configure a syslog endpoint and port. In a future 1.9 release, the endpoint and port will be required.

### Logging Format

The logging format will not change in 1.9.0, but `app_name` has been retagged as `program_name`. The log format is as follows:

`<PRI>TIMESTAMP IP_ADDRESS PROGRAM_NAME [job=NAME index=JOB_INDEX id=JOB_ID] MESSAGE`

The raw logs will look similar to the following:

```
<7>2017-06-28T16:06:10.733560+00:00 10.244.16.133 vcap.agent [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  2017/06/28 16:06:10  CEF:0|CloudFoundry|BOSH|1|agent_api|ssh|1|duser=director.be5a66bb-a9b4-459f-a0d3-1fc5c9c3ed79.be148cc6-91ef-4eed-a788-237b0b8c63b7 src=10. 254.50.4 spt=4222 shost=5ae233e0-ecc5-4868-9ae0-f9767571251b
<86>2017-06-28T16:06:16.704572+00:00 10.244.16.133 useradd [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  new group: name=bosh_ly0d2rbjr, GID=1003
<86>2017-06-28T16:06:16.704663+00:00 10.244.16.133 useradd [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  new user: name=bosh_ly0d2rbjr, UID=1001, GID=1003, home=/var/vcap/bosh_ssh/bosh_ly0d2rbjr, shell=/bin/bash
<86>2017-06-28T16:06:16.736932+00:00 10.244.16.133 usermod [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  add 'bosh_ly0d2rbjr' to group 'admin'
<86>2017-06-28T16:06:16.736964+00:00 10.244.16.133 usermod [job=rmq index=0 id=e37ecdca-5b10-4141-abd8-e1d777dfd8b5]  add 'bosh_ly0d2rbjr' to group 'vcap'
```

Logs sent to external logging tools such as Papertrail may be presented in a different format.

The following table describes the logging tags used in this template:

<table class="nice">
  <th>Tag</th>
  <th>Description</th>
  <tr>
    <td><strong>PRI</strong></td>
    <td>Severity code:

        <br>8—Emergency. System is unusable.
        <br>9—Alert. Action must be taken immediately.
        <br>10—Critical. Critical conditions
        <br>11—Error. Error conditions
        <br>12—Warning. Warning conditions
        <br>13—Notice. Normal but significant condition
        <br>14—Informational. Informational messages
        <br>15—Debug. Debug-level messages
    </td>
  </tr>
  <tr>
    <td><strong>TIMESTAMP</strong></td>
    <td>This is the timestamp of when the log is forwarded, for example, <code>2016-08-24T05:14:15.000003Z</code>. The timestamp value is typically slightly after when it was generated.</td>
  </tr>
  <tr>
    <td><strong>IP_ADDRESS</strong></td>
    <td>The internal IP address of origin server</td>
  </tr>
  <tr>
    <td><strong>PROGRAM_NAME</strong></td>
    <td>Process name of the program the generated the message. Same as <code>app_name</code> prior to 1.9.0</td>
  </tr>
  <tr>
    <td><strong>NAME</strong></td>
    <td>The BOSH instance group name (for example, `rabbitmq_server`) followed by a process name (for example `node_check`). Here are some examples: rabbit_server_node_check, rabbitmq_broker_startup_stdout</td>
  </tr>
  <tr>
    <td><strong>JOB_INDEX</strong></td>
    <td>BOSH job index. Used to distinguish between multiple instances of the same job.</td>
  </tr>
  <tr>
    <td><strong>JOB_ID</strong></td>
    <td>BOSH VM GUID. This is distinct from the CID displayed in the Ops Manager Status tab, which corresponds to the VM ID assigned by the infrastructure provider.</td>
  </tr>
  <tr>
    <td><strong>MESSAGE</strong></td>
    <td>The log message that appears</td>
  </tr>
</table>

### RabbitMQ Program Names

#### TO DO: Add table

## <a id='errands'></a>Errands

When deploying or updating the RabbitMQ for PCF tile, Ops Manager can optionally run a series of errands. An example is the `Smoke Tests` errand, which checks the health of the RabbitMQ cluster after a deploy or upgrade.

You can decide whether to run errands by toggling them on or off before an update. This is a one-time setting on the installation dashboard:

![Configuring One-time Errands](images/errands-installation.png)

As of RabbitMQ for PCF 1.9.0, **all post-deploy errands will be on by default**.

<p class='note'><strong>IMPORTANT</strong>: We recommend keeping these defaults, as
the smoke tests can catch unexpected issues, and dedicated instances of RabbitMQ for PCF can fall behind 
   if the <strong>Upgrade All Service Instances</strong> errand is not on by default.</p>

However, if necessary, you can change these defaults in the Ops Manager **Settings** tab:

![Configuring Errand Run Rules](images/errands-pane.png)

For more information on errand run rules, see the [Ops Manager documentation](https://docs.pivotal.io/tiledev/tile-errands.html#run-rules).

### Post-deploy Errands

#### TO DO: Complete this table

<table class="nice">
  <th>Errand</th>
  <th>Description</th>
  <tr>
    <td><strong>Broker Registrar</strong></td>
    <td>TBD
    </td>
  </tr>
  <tr>
    <td><strong>Smoke Tests</strong></td>
    <td>This is the timestamp of when the log is forwarded, for example, <code>2016-08-24T05:14:15.000003Z</code>. The timestamp value is typically slightly after when it was generated.</td>
  </tr>
  <tr>
    <td><strong>Register On-Demand Service Broker</strong></td>
    <td>The internal IP address of origin server</td>
  </tr>
  <tr>
    <td><strong>Upgrade All Service Instances</strong></td>
    <td>Process name of the program the generated the message. Same as <code>app_name</code> prior to 1.9.0</td>
  </tr>
</table>

### Pre-delete Errands

#### TO DO: Complete this table

<table class="nice">
  <th>Errand</th>
  <th>Description</th>
  <tr>
    <td><strong>Broker Deregistrar</strong></td>
    <td>TBD
    </td>
  </tr>
  <tr>
    <td><strong>Delete All Service Instances</strong></td>
    <td>This is the timestamp of when the log is forwarded, for example, <code>2016-08-24T05:14:15.000003Z</code>. The timestamp value is typically slightly after when it was generated.</td>
  </tr>
  <tr>
    <td><strong>Deregister On-Demand Service Broker</strong></td>
    <td>The internal IP address of origin server</td>
  </tr>
</table>

## <a id='known-issues'></a>Known Issues

* Allows changing of the `Marketplace name` for **Dedicated Instance**, which will be removed
* `disk_free_limit` changed from `50MB` to `40%` of disk capacity. This may result
  in <a href="https://www.rabbitmq.com/disk-alarms.html">disk alarms</a> being triggered
* Deleting your RabbitMQ for PCF tile can timeout (1 hour) if many dedicated instances have been
  deployed. Retrying will continue the cleanup process
* Cannot scale-out if [Erlang Cookie](./install-config-pp.html#erlang) is not specified
* Changing [Erlang Cookie](./install-config-pp.html#erlang) value results in failed deployment
* When errand run rules are set to "When Changed", Ops Manager may not run the errands when the tile has relevant changes. [See the Ops Manager documentation for more details](https://docs.pivotal.io/tiledev/tile-errands.html). We recommend leaving the default run rule set to **On**.

## <a id=''></a>Feedback

Please provide any bugs, feature requests, or questions to the [PCF Feedback list](mailto:pivotal-cf-feedback@pivotal.io).
