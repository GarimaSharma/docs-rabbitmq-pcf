---
title: RabbitMQ&reg; for PCF Operations FAQs
owner: London Services
---

This topic asks and answers some frequently asked questions (FAQs) about RabbitMQ for PCF.

## <a id="about-cli"></a>About the BOSH CLI
The BOSH CLI is available in two major versions, v1 and v2. Pivotal recommends that you use the BOSH CLI v2 when possible.

This topic provides examples of using each version of the BOSH CLI. While all versions of the BOSH CLI work with RabbitMQ for PCF v1.8.x, your PCF installation may affect which version of the BOSH CLI you can use. Consult the table below to determine which version of the CLI is supported for your installation.

<table class="nice">
    <th>PCF Version</th>
    <th>BOSH CLI Version</th>
    <tr>
        <td>v1.9, 1.10</td>
        <td>CLI v1</td>
    </tr>
    <tr>
        <td>v1.11</td>
        <td>CLI v1 or CLI v2 (Pivotal recommends CLI v2)</td>
    </tr>
</table>

## What should I check before deploying a new version of the tile?

Ensure that all nodes in the cluster are healthy via the RabbitMQ Management UI, or health metrics exposed via the Firehose.  
Do not rely on `bosh instances`, or `bosh2 instances` for v2 of the BOSH CLI, to execute this task correctly. 
That output reflects the state of the Erlang VM used by RabbitMQ, not the RabbitMQ application.

## <a id="stopstart"></a> What is the correct way to stop and start RabbitMQ in PCF?

Only BOSH commands should be used by the operator to interact with the RabbitMQ application. 

#### BOSH CLI v2: Stopping the server

This procedure is for v2 of the BOSH CLI.

Use `bosh2 stop rabbitmq-server` and `bosh2 start rabbitmq-server` to start or stop the server.

There are BOSH job lifecycle hooks which are only fired when rabbitmq-server is
stopped through BOSH. You can also stop individual instances by running:

`bosh2 stop JOB [index]`

<p class="note"><strong>Note:</strong> Do not use <code>monit stop rabbitmq-server</code> as this does not call the drain scripts.</p>

#### BOSH CLI v1: Stopping the server

This procedure is for v1 of the BOSH CLI.

Use `bosh stop rabbitmq-server` and `bosh start rabbitmq-server` to start or stop the server.

There are BOSH job lifecycle hooks which are only fired when rabbitmq-server is
stopped through BOSH. You can also stop individual instances by running:

`bosh stop JOB [index]`

<p class="note"><strong>Note:</strong> Do not use <code>monit stop rabbitmq-server</code> as this does not call the drain scripts.</p>

## <a id="boshstop"></a> What happens when I stop the RabbitMQ server with BOSH?

BOSH starts the shutdown sequence from the bootstrap instance.

This tells the RabbitMQ application to shut down and then shut down the
Erlang VM in which it is running. If this succeeds, run the following checks to ensure that the RabbitMQ application and Erlang VM have stopped:

1. If `/var/vcap/sys/run/rabbitmq-server/pid` exists, check that the PID inside
this file does not point to a running Erlang VM process. Notice that we are
tracking the Erlang PID and not the RabbitMQ PID.
1. Check that `rabbitmqctl` does not return an Erlang VM PID

Once this completes on the bootstrap instance, BOSH will continue the same
sequence on the next instance. All remaining rabbitmq-server instances will be
stopped one by one.

## <a id="serverfailprocess"></a> What happens when the stop command fails?

If the `stop` command fails, you will likely get an error saying that the drain
script failed with:

```
result: 1 of 1 drain scripts failed. Failed Jobs: rabbitmq-server.
```

## <a id="serverfailactions"></a> What do I do when the stop command fails?

The drain script logs to `/var/vcap/sys/log/rabbitmq-server/drain.log`. If you
have a remote syslog configured, this will appear as the `rmq_server_drain`
program.

First, `bosh ssh` or `bosh2 ssh` into the failing rabbitmq-server instance and start the
rabbitmq-server job by running `monit start rabbitmq-server`. You will not be
able to start the job via `bosh start` or `bosh2 start`, as this always runs the drain script first
and will fail since the drain script is failing.

Once rabbitmq-server job is running (confirm this with `monit status`), run `DEBUG=1`
`/var/vcap/jobs/rabbitmq-server/bin/drain`. This will tell you exactly why itâ€™s
failing.

## <a id="backup"></a> How can I manually back up the state of the RabbitMQ cluster?

It is possible to back up the state of a RabbitMQ cluster for both the on-demand and pre-provisioned services  using the RabbitMQ Management API. Backups include vhosts, exchanges, queues and users. 

### Back up Manually

1. Log in to the RabbitMQ Management UI as the admin user you created.  

1. Select **export definitions** from the main page.  

### Back up and Restore with a Script

Use the API to run scripts with code similar to the following:  

1. For the backup:

	```
	curl -u "$USERNAME:$PASSWORD" "http://$RABBIT_ADDRESS:15672/api/definitions"
	-o "$BACKUP_FOLDER/rabbit-backup.json"
	```

2. For the restore:

	```
	curl -u "$USERNAME:$PASSWORD" "http://$RABBIT_ADDRESS:15672/api/definitions"
	-X POST -H "Content-Type: application/json" -d
	"@$BACKUP_FOLDER/rabbit-backup.json"
	```

## <a id="preupgrade"></a> What pre-upgrade checks should I do?

Before doing any upgrade of RabbitMQ, Pivotal recommends checking the following:

1. In Operations Manager check that the status of all of the instances is healthy.
2. Log into the RabbitMQ Management UI and check that no alarms have been triggered and that all nodes are healthy, that is, 
they should display as green.
3. Check that the system is not close to hitting either the memory or disk alarm. Do this by looking at what has been 
consumed by each node in the RabbitMQ Managment UI.
