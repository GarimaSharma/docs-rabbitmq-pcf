---
title: Troubleshooting
owner: London Services
---

This topic provides basic instructions for operators troubleshooting On-Demand RabbitMQ&reg; for PCF.


## <a id="create-instance"></a> Errors


### <a id="create-instance"></a> Instance Creation Errors

This section describes errors that may occur when a developer runs `cf create-service` to create an instance of the on-demand RabbitMQ for PCF service.

<table border='1' class='nice'>
<tr>
  <th width="22%">Error</th>
  <td>Developers cannot create instances of on-demand services. Errors they report may include:
    <ul>
    <li><code>TK cannot create instance GUID TASK-ID</code></li>
    <li><code>TK cannot create instance GUID TASK-ID</code></li>
    </ul>
 </td>
</tr>
<tr>
  <th>Possible Causes</th>
  <td>
    <ul>
    <li>BOSH fails when trying to create a new VM</li>
    <li>Cloud Controller, On-Demand Broker, or Service Adapter fails in its role creating a new service instance</li>
    <li>The network fails to deliver messages between the Cloud Controller, On-Demand Broker, Service Adapter, and BOSH</li>
    </ul>
  </td>
</tr>
<tr>
  <th>Solution</th>
  <td>
    <p>Any <code>create-instance</code>error includes the following identifiers, which are useful for debugging:</p>

    <ul><li>The BOSH Task ID of the instance creation job.</li>
    <li>The GUID of the partially-created service instance</li></ul>

    <p>If you do not have these identifiers, follow the instructions to <a href="#determine-task-id">Determine the Task ID of a create-instance Task</a> and to <a href="#determine-guid">Determine the GUID of an Instance</a>.</p>

    <p>Once you have the BOSH Task ID and instance GUID, proceed as follows:</p>

    <ol><li>
      Run <code>bosh task TASK-ID</code> to show instance creation task errors from BOSH. Possible errors include failure at the IaaS level and hitting your rate limit for the day.
    </li><li>
      If the BOSH task completed successfully, the problem was elsewhere. You can use a logging platform to locate where. If you haven't already, follow the instructions to <a href="#set-up-logging">set up logging</a> to track the progress of your <code>create-service</code>task. Note that RabbitMQ for PCF logs and platform component logs are configured separately.
    </li><li>
      Search for the service instance GUID in the logs generated by <code>cf create-service</code>.
    </li><li>
      Refer to the <a href="../on-demand-service-broker/concepts.html#create-service-instance">Create service instance process diagram</a> to see the order of component actions and messages that successfully create an on-demand service instance. The Cloud Controller component generates the service instance GUID before it sends the first <code>provision instance</code> call to the on-demand broker, and all subsequent messages related to the instance creation task include this GUID.
    </li><li>
      Along with the process diagram, refer to these component identifiers in the logs to determine how far the <code>create-service</code> process went and where it failed:
      <ul><li><code>tk_cloud_controller_xyz</code> - Cloud Controller</li>
      <li><code>tk_odb_xyz</code> - On-Demand Broker</li>
      <li><code>tk_jobs_rabbitmq_server</code> - RabbitMQ for PCF Service Adapter</li>
      <li><code>tk_bosh_xyz</code> - BOSH</li></ul>
    </li></ol>
  </td>
</tr>
</table>

### <a id="stop"></a> <i>bosh stop</i> Failure

If the `bosh stop` fails, you will likely get an error saying that the drain
script failed with:

```
result: 1 of 1 drain scripts failed. Failed Jobs: rabbitmq-server.
```

#### What do I do when bosh stop rabbitmq-server fails?

The drain script logs to `/var/vcap/sys/log/rabbtimq-server/drain.log`. If you
have a remote syslog configured, this will appear as the `rmq_server_drain`
program.

First, `bosh ssh` into the failing rabbitmq-server instance and start the
rabbimtq-server job by running `monit start rabbitmq-server`). You will not be
able to start the job via `bosh start` as this always runs the drain script first
and will fail since the drain script is failing. Once rabbitmq-server job is
running (confirm this via `monit status`), run `DEBUG=1`
`/var/vcap/jobs/rabbitmq-server/bin/drain`. This will tell you exactly why itâ€™s
failing.


### <a id="smoke"></a> Smoke Test Failure

If errors occur while the smoke tests run, they will be summarised at the end of the errand log output.
Detailed logs can be found where the failure occurs.

When encountering an error when running smoke tests, it can be helpful to search the log for other instances
of the error summary printed at the end of the tests, e.g. <code>Failed to target Cloud Foundry</code>.
Lookout for <code>TIP: ...</code> in the logs next to any error output for further troubleshooting hints.

## <a id="techniques"></a> Techniques


### <a id="determine-task-id"></a> Determine the Task ID of a <i>create-service</i> Task

This procedure determines the Task ID for the BOSH task that creates (or attempts to create) an on-demand service instance, if you only know the the service name. This BOSH task is triggered by the `cf create-service` command.

1. Use the cf CLI to target and to log in to your deployment. See [Login](../cf-cli/getting-started.html#login) the *Getting Started with the cf CLI* topic.
    <pre class="terminal">
    $ cf login -a https<span>://</span>api.example.com -u username<span>@</span>example.com
    API endpoint: https<span>://</span>api.example.com
    </pre>

1. Follow the directions to [SSH into Ops Manager](/customizing/trouble-advanced.html#ssh) in the *Advanced Troubleshooting with the BOSH CLI* topic. Use the following values:

    * **Certificate Location**: Use the file path on your local machine to the key pair used to install Ops Manager.
    * **BOSH Director IP Address**: Retrieve from the Ops Manager Director tile **Status** tab.
    * **BOSH Director Credentials**: Retrieve from the Ops Manager API or find it in the Ops Man Director tile **Credentials** tab > **Director Credentials**.

1. Continue following the *Advanced Troubleshooting* directions to [Log into BOSH](/customizing/trouble-advanced.html#log-in). 

1. From the Ops Manager Director VM you can now use the BOSH CLI to retrieve information about service instances from the BOSH Director VM.
    <pre class="terminal">
    $ bosh --ca-cert CERTIFICATE-LOCATON target BOSH-DIRECTOR-IP
    </pre>

bosh tasks recent

bosh tasks recent | grep GUID # first column gives you TASK-ID # for instance

bosh task TASK-ID # shows full error message

bosh task TASK-ID --raw # shows raw JSON of error

### <a id="determine-guid"></a> Determine the GUID of an Instance

This procedure determines the GUID of a service instance if you only know the service name. It works whether or not the service instance was created successfully.

1. Log into the space containing the instance or failed instance. 
    <pre class="terminal">
    $ cf login
    </pre>

1. Run `cf services` to see a listing of

cf services - only one line on each

cf service SERVICE-INSTANCE-NAME # more info on specific instance

cf service SERVICE-INSTANCE-NAME --guid # to get GUID of instance


### <a id="set-up-logging"></a> Set Up Logging

This procedure sets up logging for RabbitMQ for PCF, to send log messages from RabbitMQ for PCF service components to a logging platform.

1. If you haven't already, set up an account with a <a href="../pivotalcf/devguide/services/log-management-thirdparty-svc.html">logging service</a>.

1. In Ops Manager, click into the **RabbitMQ for PCF** tile.

1. In the **Settings** tab > **Syslog** pane enter the following:
  * For **Syslog address**, enter the address of your logging service endpoint
  * For **Syslog port**, enter the port number of your logging service endpoint

1. Click **Save**.

1. In the **Installation Dashboard**, click **Apply Changes**.

This setup only forwards logs from RabbitMQ for PCF components, not from platform components like the Cloud Controller. To forward platform component logs, open the Elastic Runtime tile **Syslog** pane and configure your logging endpoint address and port number as the **Syslog address** and **Syslog port** fields.

### <a id="stop"></a> Stop RabbitMQ

This procedure safely stops RabbitMQ. You may need to do this when debugging, on your own or working with GSS.

`bosh stop rabbitmq-server`

There are BOSH job lifecycle hooks which are only fired when rabbitmq-server is
stopped through BOSH. This will cleanly stop the RabbitMQ service and is the only supported method of stopping the service.

**DO NOT STOP RABBITMQ VIA MONIT**

Do not log into the virtual machine running the RabbitMQ service and stop the RabbitMQ service via monit. It is a potentially dangerous operation as it will kill the RabbitMQ service immediately.

#### What happens when I run bosh stop rabbitmq-server?

BOSH starts the shutdown sequence from the bootstrap instance.

We start by telling the RabbitMQ application to shutdown and then shutdown the
Erlang VM within which it is running. If this succeeds, we run the following
checks to ensure that the RabbitMQ application and Erlang VM have stopped:

1. If `/var/vcap/sys/run/rabbitmq-server/pid` exists, check that the PID inside
this file does not point to a running Erlang VM process. Notice that we are
tracking the Erlang PID and not the RabbitMQ PID.
1. Check that `rabbitmqctl` does not return an Erlang VM PID

Once this completes on the bootstrap instance, BOSH will continue the same
sequence on the next instance. All remaining rabbitmq-server instances will be
stopped one by one.
